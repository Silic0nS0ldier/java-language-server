load("@rules_java//java:defs.bzl", "java_binary", "java_library", "java_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

# Output of interest is main_deploy.jar

# add_exports and add_opens are embedded in the deploy jar
add_exports = [
    "jdk.compiler/com.sun.tools.javac.api",
    "jdk.compiler/com.sun.tools.javac.code",
    "jdk.compiler/com.sun.tools.javac.comp",
    "jdk.compiler/com.sun.tools.javac.main",
    "jdk.compiler/com.sun.tools.javac.tree",
    "jdk.compiler/com.sun.tools.javac.model",
    "jdk.compiler/com.sun.tools.javac.util",
]
add_opens = [
    "jdk.compiler/com.sun.tools.javac.api",
]

java_binary(
    name = "language_server",
    main_class = "org.javacs.Main",
    srcs = glob(["java/**/*.java"]),
    deps = [
        "@maven//:com_google_code_gson_gson",
        "@maven//:com_google_protobuf_protobuf_java",
        ":analysis_java_proto",
    ],
    add_exports = add_exports,
    add_opens = add_opens,
    visibility = ["//server/src/test:__pkg__", "//extension/vsix:__pkg__"]
)

# TODO This binary can be trimmed down a lot, most of the source is for the language server
java_binary(
    name = "debug_server",
    main_class = "org.javacs.debug.JavaDebugServer",
    srcs = glob(["java/**/*.java"]),
    deps = [
        "@maven//:com_google_code_gson_gson",
        "@maven//:com_google_protobuf_protobuf_java",
        ":analysis_java_proto",
    ],
    add_exports = add_exports,
    add_opens = add_opens,
    visibility = ["//server/src/test:__pkg__", "//extension/vsix:__pkg__"]
)

java_library(
    name = "lib",
    srcs = glob(["java/**/*.java"]),
    deps = [
        "@maven//:com_google_code_gson_gson",
        "@maven//:com_google_protobuf_protobuf_java",
        ":analysis_java_proto",
    ],
    add_exports = add_exports,
    add_opens = add_opens,
    visibility = ["//server/src/test:__pkg__"]
)

proto_library(
    name = "build_proto",
    srcs = [
        "protobuf/build.proto",
    ],
)

proto_library(
    name = "analysis_v2_proto",
    srcs = ["protobuf/analysis_v2.proto"],
    deps = [":build_proto"],
)

# TODO Remove, versions of Bazel this old aren't worth the hassle of supporting
proto_library(
    name = "analysis_v1_proto",
    srcs = ["protobuf/analysis.proto"],
    deps = [":build_proto"],
)

java_proto_library(
    name = "analysis_java_proto",
    deps = [
        ":analysis_v1_proto",
        ":analysis_v2_proto",
    ],
)
