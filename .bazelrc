common --enable_platform_specific_config

common --symlink_prefix=.bazel/

# Enable Java 21 language features
build --java_runtime_version=21
build --java_language_version=21
build --tool_java_language_version=21
build --tool_java_runtime_version=21
build --tool_java_runtime_version=remotejdk_21

# Rules TS
common --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
common --@aspect_rules_ts//ts:default_to_tsc_transpiler

# CI UI optimisations
common --show_progress_rate_limit=0.05
common:ci --show_progress_rate_limit=1

# For integration tests
common --deleted_packages examples/bazel-project/hello
common --deleted_packages examples/bazel-project-broken/broken
common --deleted_packages examples/bazel-project-broken/hello
common --deleted_packages examples/bazel-protos-project/hello
common --deleted_packages examples/bazel-protos-project/protos

# For hermetic CC toolchains
# TODO Use a hermetic cache
build:linux --sandbox_add_mount_pair=/tmp
build:macos --sandbox_add_mount_pair=/var/tmp
build:windows --sandbox_add_mount_pair=C:\Temp
#build --sandbox_add_mount_pair=%workspace%/.bazel/zig-cache
#build --repo_env=HERMETIC_CC_TOOLCHAIN_CACHE_PREFIX=%workspace%/.bazel/zig-cache
build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Disable embedded and builtin rules
# Not all rulesets support this, exceptions are as follows;
# - @rules_java
#   - +java_common
#   - +JavaInfo
#   - +JavaPluginInfo
# - @rules_rust
#   - @rules_shell
common --incompatible_autoload_externally=-@rules_python,+java_common,+JavaInfo,+JavaPluginInfo,-ProguardSpecProvider,-java_binary,-java_import,-java_library,-java_plugin,-java_test,-java_runtime,-java_toolchain,-java_package_configuration,-@com_google_protobuf,@rules_shell,-@rules_android

# Incompatible flags for Bazel 9
common --incompatible_disable_native_repo_rules
# Blocked by @rules_java which uses create_executable
#common --incompatible_disable_non_executable_java_binary
common --incompatible_disallow_struct_provider_syntax
common --incompatible_disable_target_provider_fields
# Blocked by @rules_python which uses Label.workspace_name
# _We_ don't use @rules_python but other modules do;
# - @rules_jvm_external@6.6 -> @rules_kotlin@1.9.6
# - @rules_java@8.6.2 -> @abseil-cpp@20240116.1 -> @googletest@1.14.0.bcr.1 -> @re2@2023-09-01
# - @protobuf@29.0 -> (direct)
#                  -> @rules_fuzzing@0.5.2
#                  -> @rules_pkg@1.0.1
#common --noincompatible_enable_deprecated_label_apis
# Blocked by @rules_java which uses CcInfo
#common --incompatible_stop_exporting_language_modules
# Most rules do not support this and likely won't for a long time
# Personal opinion: AEG solves one problem while ignoring others
# 1. It assumes only 1 toolchain will be used in an action.
# 2. It assumes some level of isolation with how toolchains are used in rules.
# AEG in effect actively discourages composition as making it dangerous to use multiple toolchains.
#common --incompatible_auto_exec_groups
common --incompatible_disable_starlark_host_transitions
common --incompatible_config_setting_private_default_visibility

build --javacopt="-XepOpt:NullAway:AnnotatedPackages=org.javacs -Xep:NullAway:WARN"
